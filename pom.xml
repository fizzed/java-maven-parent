<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mfizz</groupId>
  <artifactId>mfz-maven-parent</artifactId>
  <packaging>pom</packaging>
  <version>1.1</version>
  <name>mfz-maven-parent</name>

  <inceptionYear>2012</inceptionYear>
  
  <organization>
    <name>mfizz</name>
    <url>http://mfizz.com</url>
  </organization>

  <prerequisites>
    <maven>2.2.1</maven>
  </prerequisites>

  <!--
  <licenses>
    <license>
      <name>Apache 2</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>manual</distribution>
    </license>
  </licenses>
  -->

  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>1.3</version>
        <configuration>
          <verbose>false</verbose>
          <addSvnKeyWords>false</addSvnKeyWords>
        </configuration>
        <executions>
          <execution>
            <id>first</id>
            <goals>
              <goal>update-file-header</goal>
            </goals>
            <phase>process-sources</phase>
            <configuration>
              <licenseName>apache_v2</licenseName>
              <excludes>
                <exclude>**/Version.java</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.5.1</version>
        <configuration>
          <debug>true</debug>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>${maven-release-plugin.version}</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <archive>
            <manifestFile>${commons.manifestfile}</manifestFile>
            <manifestEntries>
              <Specification-Title>${project.name}</Specification-Title>
              <Specification-Version>${project.version}</Specification-Version>
              <Specification-Vendor>${project.organization.name}</Specification-Vendor>
              <Implementation-Title>${project.name}</Implementation-Title>
              <Implementation-Version>${project.version}</Implementation-Version>
              <Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
              <Implementation-Build>${implementation.build}</Implementation-Build>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <configuration>
          <classpathScope>test</classpathScope>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>netbeans-freeform-maven-plugin</artifactId>
        <version>${netbeans-freeform-maven-plugin.version}</version>
        <configuration>
          <additionalGoals>source:jar</additionalGoals>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>${maven-eclipse-plugin.version}</version>
        <configuration>
          <downloadSources>true</downloadSources>
          <downloadJavadocs>true</downloadJavadocs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>${project.build.outputDirectory}</directory>
            </fileset>
            <fileset>
              <directory>build</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <!-- for enabling for OSGi : based on Apache Commons Parent POM -->
      <!--
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.3.5</version>
        <extensions>true</extensions>
        <configuration>
          <archive> 
            <forced>true</forced> 
          </archive>
          <excludeDependencies>true</excludeDependencies>
          <manifestLocation>target/osgi</manifestLocation>
          <instructions>
            <_nouses>true</_nouses>
            <Bundle-SymbolicName>${commons.osgi.symbolicName}</Bundle-SymbolicName>
            <Export-Package>${commons.osgi.export}</Export-Package>
            <Private-Package>${commons.osgi.private}</Private-Package>
            <Import-Package>${commons.osgi.import}</Import-Package>
            <DynamicImport-Package>${commons.osgi.dynamicImport}</DynamicImport-Package>
          </instructions>
        </configuration>
        <executions>
          <execution>
            <id>bundle-manifest</id>
            <phase>process-classes</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      -->
      
      <!-- generate Dependency.txt so it can be committed to source control  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.5</version>
        <executions>
          <execution>
            <id>list-dependencies</id>
            <phase>compile</phase>
            <goals>
              <goal>tree</goal>
            </goals>
            <configuration>
              <outputFile>Dependency.txt</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- generate Version.java automatically (but only if main.java.package is set) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.3</version>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
          <dependency>
            <groupId>ant</groupId>
            <artifactId>ant-nodeps</artifactId>
            <version>1.6.5</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath"/>
                <property name="package.name" value="${main.java.package}" />
                <property name="src.dir" value="${project.build.sourceDirectory}" />
                <propertyregex property="package.dir" input="\${package.name}" defaultValue="" regexp="\." replace="/" casesensitive="false" override="true" />
                <property name="build.timestamp" value="${maven.build.timestamp}" />
                <property name="build.version" value="${project.version}" />
                <property name="build.name" value="${project.artifactId}" />
                <property name="build.vendor" value="${project.groupId}" />
                <echo message="build timestamp: ${build.timestamp}" />
                <if>
                  <equals arg1="${package.name}" arg2="" />
                  <then>
                    <echo message="#######################################################################################" />
                    <echo message="The value of property package.name is not set: set main.java.package property in maven!" />
                    <echo message="#######################################################################################" />
                  </then>
                  <else>
                    <echo file="${src.dir}/${package.dir}/Version.java" message="/** DO NOT EDIT THIS FILE. IT IS AUTO GENERATED BY MAVEN */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="package ${package.name};&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="public final class Version {&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    private static final String TIMESTAMP=&quot;${build.timestamp}&quot;;&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    private static final String VERSION=&quot;${build.version}&quot;;&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    private static final String NAME=&quot;${build.name}&quot;;&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    private static final String VENDOR=&quot;${build.vendor}&quot;;&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    private static final String LONG_VERSION=&quot;${build.version} (Build @ ${build.timestamp})&quot;;&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    /** Returns the library vendor such as &quot;${build.vendor}&quot; */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    static public String getVendor() { return VENDOR; }&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    /** Returns the library build timestamp such as &quot;${build.timestamp}&quot; */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    static public String getTimestamp() { return TIMESTAMP; }&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    /** Returns the library name such as &quot;${build.name}&quot; */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    static public String getName() { return NAME; }&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    /** Returns the library version such as &quot;${build.version}&quot; */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    static public String getVersion() { return VERSION; }&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    /** Returns a longer library version that includes the timestamp such as &quot;${build.version} (Build @ ${build.timestamp})&quot; */&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="    static public String getLongVersion() { return LONG_VERSION; }&#13;&#10;" />
                    <echo file="${src.dir}/${package.dir}/Version.java" append="true" message="}${line.separator}" />
                 </else>
                </if>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!--
  <repositories>
    <repository>
      <id>central</id>
      <name>Maven Repository Switchboard</name>
      <layout>default</layout>
      <url>http://repo1.maven.org/maven2</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>
  -->

  <pluginRepositories>
    <!-- maven-license-plugin -->
    <pluginRepository>
      <id>mc-release</id>
      <name>MC plugin repo</name>
      <url>http://mc-repo.googlecode.com/svn/maven2/releases</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </pluginRepository>
  </pluginRepositories>

  <reporting>
    <plugins>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.8.1</version>
        <configuration>
          <source>1.6</source>
          <aggregate>true</aggregate>
          <failOnError>false</failOnError>
          <encoding>${project.build.sourceEncoding}</encoding>
          <links>
            <link>http://download.oracle.com/javase/6/docs/api/</link>
            <link>http://download.oracle.com/javaee/6/api/</link>
          </links>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>2.3</version>
        <configuration>
          <inputEncoding>${project.build.sourceEncoding}</inputEncoding>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.5</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>summary</report>
              <report>project-team</report>
              <report>cim</report>
              <report>dependencies</report>
              <report>dependency-convergence</report>
              <report>dependency-management</report>
              <report>plugin-management</report>
              <report>issue-tracking</report>
              <report>plugins</report>
            </reports>
          </reportSet>
        </reportSets>
        <configuration>
          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.12.2</version>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>taglist-maven-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <tags>
            <tag>TODO</tag>
            <tag>FIXME</tag>
            <tag>NOTE</tag>
            <tag>@todo</tag>
            <tag>@deprecated</tag>
          </tags>
        </configuration>
      </plugin>
      <plugin>
        <!-- allows for checking of copy/paste coding style -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>2.7.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>2.9.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <rulesets>
            <ruleset>http://svn.apache.org/repos/asf/maven/plugins/trunk/maven-pmd-plugin/src/main/resources/rulesets/maven.xml</ruleset>
          </rulesets>
          <linkXref>true</linkXref>
          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
          <minimumTokens>100</minimumTokens>
          <targetJdk>1.6</targetJdk>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.2</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-changelog-plugin</artifactId>
        <version>2.2</version>
      </plugin>
    </plugins>
  </reporting>

  <properties>
    <!-- Maven config -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <copyright.year>2012</copyright.year>
    <maven.test.skip>false</maven.test.skip>
    <maven.integration.skip>true</maven.integration.skip>
    <license.skip>false</license.skip>

    <!-- Maven plugin component versions -->
    <maven-release-plugin.version>2.1</maven-release-plugin.version>
    <maven-license-plugin.version>1.9.0</maven-license-plugin.version>
    <exec-maven-plugin.version>1.2</exec-maven-plugin.version>
    <netbeans-freeform-maven-plugin.version>2.0</netbeans-freeform-maven-plugin.version>
    <maven-eclipse-plugin.version>2.8</maven-eclipse-plugin.version>
    
    <!-- 3rd Party library dependency versions -->
    <main.java.package></main.java.package>
    <joda-time.version>[1.6,)</joda-time.version>
    <junit.version>[4.0,)</junit.version>
    <log4j.version>[1.2.13,)</log4j.version>
    <logback.version>[0.9,)</logback.version>
    <netty.version>[3.2,)</netty.version>
    <slf4j.version>[1.5.0,)</slf4j.version>
    
    <!-- Configuration properties for the OSGi maven-bundle-plugin -->
    <commons.osgi.symbolicName>${project.groupId}.${project.artifactId}</commons.osgi.symbolicName>
    <commons.osgi.export>*;version=${project.version};-noimport:=true</commons.osgi.export>
    <commons.osgi.import>*</commons.osgi.import>
    <commons.osgi.dynamicImport />
    <commons.osgi.private />

    <!-- location of any manifest file used by maven-jar-plugin -->
    <!--<commons.manifestfile>target/osgi/MANIFEST.MF</commons.manifestfile>-->
  </properties>
</project>
